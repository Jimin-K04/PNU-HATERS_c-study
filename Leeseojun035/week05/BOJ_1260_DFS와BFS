#include <stdio.h>
#include <stdlib.h>
#define MAXSIZE 1001

int DFS_output[MAXSIZE]={0,};
int BFS_output[MAXSIZE]={0,};


typedef struct node {
    int vertex;
    struct node* link; // typedef가 선언되기 전까지는 struct를 사용해야 함
} node;

typedef struct Graph {
    int n; // vertex 개수
    node* adj_list[MAXSIZE];
} Graph;

void init(Graph* pGh) {
    pGh->n = 0;
    for (int v = 0; v < MAXSIZE; v++)
        pGh->adj_list[v] = NULL;
}

void insertEdge(Graph* pGh, int st, int dst) {
    node* newnode = (node*)malloc(sizeof(node));
    newnode->vertex = dst; // newnode의 vertex 초기화
    newnode->link = pGh->adj_list[st];
    pGh->adj_list[st] = newnode;
}


void undirectedEdge(Graph* pGh, int u, int v) {
    insertEdge(pGh, u, v);
    insertEdge(pGh, v, u);
}
int compare(const void* a, const void* b) {
    return (*(int*)a - *(int*)b);
}



void DFS(Graph* pGh, int start) {
    int stack[MAXSIZE];
    int visited[MAXSIZE] = {0,}; // 0이면 미방문, 1이면 방문
    int top = -1;
    int outputIdx = 0;

    stack[++top] = start;

 while (top != -1) {
        int preNode = stack[top--];

        if (visited[preNode] == 0) {
            visited[preNode] = 1;
            DFS_output[outputIdx++] = preNode;

            // 인접 리스트의 노드들을 수집
            node* nextNode = pGh->adj_list[preNode];
            int neighbors[MAXSIZE], count = 0;

            while (nextNode != NULL) {
                if (visited[nextNode->vertex] == 0) {
                    neighbors[count++] = nextNode->vertex;
                }
                nextNode = nextNode->link;
            }

            // 오름차순으로 정렬
            qsort(neighbors, count, sizeof(int), compare);

            // 정렬된 순서대로 스택에 추가 (큰 노드부터 추가)
            for (int i = count-1; i >= 0; i--) {
                stack[++top] = neighbors[i];
            }
        }
    }
    DFS_output[outputIdx] = -1;

}
/////////////////////////////////////////////////////////////////////
void BFS(Graph* pGh, int start) {
    int queue[MAXSIZE];
    int visited[MAXSIZE] = {0,}; // 0이면 미방문, 1이면 방문
    int front = 0, rear = 0;
    int outputIdx = 0;

    queue[++rear] = start;

 while (front!=rear) {
        front = (front+1)%MAXSIZE;
        int preNode = queue[front];

        if (visited[preNode] == 0) {
            visited[preNode] = 1;
            BFS_output[outputIdx++] = preNode;

            // 인접 리스트의 노드들을 수집
            node* nextNode = pGh->adj_list[preNode];
            int neighbors[MAXSIZE], count = 0;

            while (nextNode != NULL) {
                if (visited[nextNode->vertex] == 0) {
                    neighbors[count++] = nextNode->vertex;
                }
                nextNode = nextNode->link;
            }

            // 오름차순으로 정렬
            qsort(neighbors, count, sizeof(int), compare);

            // 정렬된 순서대로 스택에 추가 (큰 노드부터 추가)
            for (int i = 0; i < count; i++) {
                    rear = (rear+1)%MAXSIZE;
                queue[rear] = neighbors[i];
            }
        }
    }
    BFS_output[outputIdx] = -1;

}

void freeGraph(Graph* pGh) {
    for (int i = 0; i < pGh->n; i++) {
        node* current = pGh->adj_list[i];
        while (current != NULL) {
            node* temp = current;
            current = current->link;
            free(temp);
        }
    }
    free(pGh); // pGh 구조체 해제
}
void print_adj_list(Graph * g) {
//그래프 g의 각 정점에 대한 인접리스트를 출력하는 연산입니다.
	for (int i = 0; i < g->n; i++) {
//i가 0부터 정점의 개수만큼 까지 하나씩 증가하는 for문입니다.
		node* p = g->adj_list[i];
//i를 그래프의 인접리스트 정점에 대입합니다.
		printf("정점 %d의 인접 리스트", i);
//i에 대한 인접리스트를 출력합니다.
		while (p != NULL) {
			printf("-> %d", p->vertex);
			p = p->link;
//정점을 출력합니다.
		}
		printf("\n");
	}
}

int main()
{
    int i= 0, j=0;
    Graph* g;
    g = (Graph*)malloc(sizeof(Graph));
    init(g);
    int vertex,edge,start;
    scanf("%d %d %d",&vertex, &edge, &start);
    g->n= vertex;


    for(int i=0; i<edge; i++){
        int v1,v2;
        scanf("%d %d",&v1,&v2);
        undirectedEdge(g,v1,v2);
    }
    DFS(g,start);
    BFS(g,start);
    while(DFS_output[i]!=-1){
        printf("%d ",DFS_output[i]);
        i++;
    }
    printf("\n");
    while(BFS_output[j]!=-1){
        printf("%d ",BFS_output[j]);
        j++;
    }
    print_adj_list(g);

    freeGraph(g);
    return 0;
}
